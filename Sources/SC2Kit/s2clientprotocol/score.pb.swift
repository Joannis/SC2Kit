// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: s2clientprotocol/score.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SC2APIProtocol_Score {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scoreType: SC2APIProtocol_Score.ScoreType {
    get {return _storage._scoreType ?? .curriculum}
    set {_uniqueStorage()._scoreType = newValue}
  }
  /// Returns true if `scoreType` has been explicitly set.
  var hasScoreType: Bool {return _storage._scoreType != nil}
  /// Clears the value of `scoreType`. Subsequent reads from it will return its default value.
  mutating func clearScoreType() {_uniqueStorage()._scoreType = nil}

  /// Note: check score_type to know whether this is a melee score or curriculum score
  var score: Int32 {
    get {return _storage._score ?? 0}
    set {_uniqueStorage()._score = newValue}
  }
  /// Returns true if `score` has been explicitly set.
  var hasScore: Bool {return _storage._score != nil}
  /// Clears the value of `score`. Subsequent reads from it will return its default value.
  mutating func clearScore() {_uniqueStorage()._score = nil}

  var scoreDetails: SC2APIProtocol_ScoreDetails {
    get {return _storage._scoreDetails ?? SC2APIProtocol_ScoreDetails()}
    set {_uniqueStorage()._scoreDetails = newValue}
  }
  /// Returns true if `scoreDetails` has been explicitly set.
  var hasScoreDetails: Bool {return _storage._scoreDetails != nil}
  /// Clears the value of `scoreDetails`. Subsequent reads from it will return its default value.
  mutating func clearScoreDetails() {_uniqueStorage()._scoreDetails = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ScoreType: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// map generated score (from curriculum maps with special scoring)
    case curriculum // = 1

    /// summation of in-progress and current units/buildings value + minerals + vespene
    case melee // = 2

    init() {
      self = .curriculum
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .curriculum
      case 2: self = .melee
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .curriculum: return 1
      case .melee: return 2
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension SC2APIProtocol_Score.ScoreType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct SC2APIProtocol_CategoryScoreDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Used when no other category is configured in game data
  var none: Float {
    get {return _none ?? 0}
    set {_none = newValue}
  }
  /// Returns true if `none` has been explicitly set.
  var hasNone: Bool {return self._none != nil}
  /// Clears the value of `none`. Subsequent reads from it will return its default value.
  mutating func clearNone() {self._none = nil}

  var army: Float {
    get {return _army ?? 0}
    set {_army = newValue}
  }
  /// Returns true if `army` has been explicitly set.
  var hasArmy: Bool {return self._army != nil}
  /// Clears the value of `army`. Subsequent reads from it will return its default value.
  mutating func clearArmy() {self._army = nil}

  var economy: Float {
    get {return _economy ?? 0}
    set {_economy = newValue}
  }
  /// Returns true if `economy` has been explicitly set.
  var hasEconomy: Bool {return self._economy != nil}
  /// Clears the value of `economy`. Subsequent reads from it will return its default value.
  mutating func clearEconomy() {self._economy = nil}

  var technology: Float {
    get {return _technology ?? 0}
    set {_technology = newValue}
  }
  /// Returns true if `technology` has been explicitly set.
  var hasTechnology: Bool {return self._technology != nil}
  /// Clears the value of `technology`. Subsequent reads from it will return its default value.
  mutating func clearTechnology() {self._technology = nil}

  var upgrade: Float {
    get {return _upgrade ?? 0}
    set {_upgrade = newValue}
  }
  /// Returns true if `upgrade` has been explicitly set.
  var hasUpgrade: Bool {return self._upgrade != nil}
  /// Clears the value of `upgrade`. Subsequent reads from it will return its default value.
  mutating func clearUpgrade() {self._upgrade = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _none: Float? = nil
  fileprivate var _army: Float? = nil
  fileprivate var _economy: Float? = nil
  fileprivate var _technology: Float? = nil
  fileprivate var _upgrade: Float? = nil
}

struct SC2APIProtocol_VitalScoreDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var life: Float {
    get {return _life ?? 0}
    set {_life = newValue}
  }
  /// Returns true if `life` has been explicitly set.
  var hasLife: Bool {return self._life != nil}
  /// Clears the value of `life`. Subsequent reads from it will return its default value.
  mutating func clearLife() {self._life = nil}

  var shields: Float {
    get {return _shields ?? 0}
    set {_shields = newValue}
  }
  /// Returns true if `shields` has been explicitly set.
  var hasShields: Bool {return self._shields != nil}
  /// Clears the value of `shields`. Subsequent reads from it will return its default value.
  mutating func clearShields() {self._shields = nil}

  var energy: Float {
    get {return _energy ?? 0}
    set {_energy = newValue}
  }
  /// Returns true if `energy` has been explicitly set.
  var hasEnergy: Bool {return self._energy != nil}
  /// Clears the value of `energy`. Subsequent reads from it will return its default value.
  mutating func clearEnergy() {self._energy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _life: Float? = nil
  fileprivate var _shields: Float? = nil
  fileprivate var _energy: Float? = nil
}

struct SC2APIProtocol_ScoreDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sum of time any available structure able to produce a unit is not. The time stacks, as in, three idle barracks will increase idle_production_time three times quicker than just one.
  var idleProductionTime: Float {
    get {return _storage._idleProductionTime ?? 0}
    set {_uniqueStorage()._idleProductionTime = newValue}
  }
  /// Returns true if `idleProductionTime` has been explicitly set.
  var hasIdleProductionTime: Bool {return _storage._idleProductionTime != nil}
  /// Clears the value of `idleProductionTime`. Subsequent reads from it will return its default value.
  mutating func clearIdleProductionTime() {_uniqueStorage()._idleProductionTime = nil}

  /// Sum of time any worker is not mining. Note a worker building is not idle and three idle workers will increase this value three times quicker than just one.
  var idleWorkerTime: Float {
    get {return _storage._idleWorkerTime ?? 0}
    set {_uniqueStorage()._idleWorkerTime = newValue}
  }
  /// Returns true if `idleWorkerTime` has been explicitly set.
  var hasIdleWorkerTime: Bool {return _storage._idleWorkerTime != nil}
  /// Clears the value of `idleWorkerTime`. Subsequent reads from it will return its default value.
  mutating func clearIdleWorkerTime() {_uniqueStorage()._idleWorkerTime = nil}

  /// Sum of minerals and vespene spent on completed units.
  var totalValueUnits: Float {
    get {return _storage._totalValueUnits ?? 0}
    set {_uniqueStorage()._totalValueUnits = newValue}
  }
  /// Returns true if `totalValueUnits` has been explicitly set.
  var hasTotalValueUnits: Bool {return _storage._totalValueUnits != nil}
  /// Clears the value of `totalValueUnits`. Subsequent reads from it will return its default value.
  mutating func clearTotalValueUnits() {_uniqueStorage()._totalValueUnits = nil}

  /// Sum of minerals and vespene spent on completed structures.
  var totalValueStructures: Float {
    get {return _storage._totalValueStructures ?? 0}
    set {_uniqueStorage()._totalValueStructures = newValue}
  }
  /// Returns true if `totalValueStructures` has been explicitly set.
  var hasTotalValueStructures: Bool {return _storage._totalValueStructures != nil}
  /// Clears the value of `totalValueStructures`. Subsequent reads from it will return its default value.
  mutating func clearTotalValueStructures() {_uniqueStorage()._totalValueStructures = nil}

  /// Sum of minerals and vespene of units, belonging to the opponent, that the player has destroyed.
  var killedValueUnits: Float {
    get {return _storage._killedValueUnits ?? 0}
    set {_uniqueStorage()._killedValueUnits = newValue}
  }
  /// Returns true if `killedValueUnits` has been explicitly set.
  var hasKilledValueUnits: Bool {return _storage._killedValueUnits != nil}
  /// Clears the value of `killedValueUnits`. Subsequent reads from it will return its default value.
  mutating func clearKilledValueUnits() {_uniqueStorage()._killedValueUnits = nil}

  /// Sum of minerals and vespene of structures, belonging to the opponent, that the player has destroyed.
  var killedValueStructures: Float {
    get {return _storage._killedValueStructures ?? 0}
    set {_uniqueStorage()._killedValueStructures = newValue}
  }
  /// Returns true if `killedValueStructures` has been explicitly set.
  var hasKilledValueStructures: Bool {return _storage._killedValueStructures != nil}
  /// Clears the value of `killedValueStructures`. Subsequent reads from it will return its default value.
  mutating func clearKilledValueStructures() {_uniqueStorage()._killedValueStructures = nil}

  /// Sum of minerals collected by the player.
  var collectedMinerals: Float {
    get {return _storage._collectedMinerals ?? 0}
    set {_uniqueStorage()._collectedMinerals = newValue}
  }
  /// Returns true if `collectedMinerals` has been explicitly set.
  var hasCollectedMinerals: Bool {return _storage._collectedMinerals != nil}
  /// Clears the value of `collectedMinerals`. Subsequent reads from it will return its default value.
  mutating func clearCollectedMinerals() {_uniqueStorage()._collectedMinerals = nil}

  /// Sum of vespene collected by the player.
  var collectedVespene: Float {
    get {return _storage._collectedVespene ?? 0}
    set {_uniqueStorage()._collectedVespene = newValue}
  }
  /// Returns true if `collectedVespene` has been explicitly set.
  var hasCollectedVespene: Bool {return _storage._collectedVespene != nil}
  /// Clears the value of `collectedVespene`. Subsequent reads from it will return its default value.
  mutating func clearCollectedVespene() {_uniqueStorage()._collectedVespene = nil}

  /// Estimated income of minerals over the next minute based on the players current income. The unit is minerals per minute.
  var collectionRateMinerals: Float {
    get {return _storage._collectionRateMinerals ?? 0}
    set {_uniqueStorage()._collectionRateMinerals = newValue}
  }
  /// Returns true if `collectionRateMinerals` has been explicitly set.
  var hasCollectionRateMinerals: Bool {return _storage._collectionRateMinerals != nil}
  /// Clears the value of `collectionRateMinerals`. Subsequent reads from it will return its default value.
  mutating func clearCollectionRateMinerals() {_uniqueStorage()._collectionRateMinerals = nil}

  /// Estimated income of vespene over the next minute based on the players current income. The unit is vespene per minute.
  var collectionRateVespene: Float {
    get {return _storage._collectionRateVespene ?? 0}
    set {_uniqueStorage()._collectionRateVespene = newValue}
  }
  /// Returns true if `collectionRateVespene` has been explicitly set.
  var hasCollectionRateVespene: Bool {return _storage._collectionRateVespene != nil}
  /// Clears the value of `collectionRateVespene`. Subsequent reads from it will return its default value.
  mutating func clearCollectionRateVespene() {_uniqueStorage()._collectionRateVespene = nil}

  /// Sum of spent minerals at the moment it is spent. For example, this number is incremented by 50 the moment an scv is queued in a command center.  It is decremented by 50 if that unit is canceled.
  var spentMinerals: Float {
    get {return _storage._spentMinerals ?? 0}
    set {_uniqueStorage()._spentMinerals = newValue}
  }
  /// Returns true if `spentMinerals` has been explicitly set.
  var hasSpentMinerals: Bool {return _storage._spentMinerals != nil}
  /// Clears the value of `spentMinerals`. Subsequent reads from it will return its default value.
  mutating func clearSpentMinerals() {_uniqueStorage()._spentMinerals = nil}

  /// Sum of spent vespene at the moment it is spent. For example, this number is incremented by 50 when a reaper is queued but decremented by 50 if it is canceled.
  var spentVespene: Float {
    get {return _storage._spentVespene ?? 0}
    set {_uniqueStorage()._spentVespene = newValue}
  }
  /// Returns true if `spentVespene` has been explicitly set.
  var hasSpentVespene: Bool {return _storage._spentVespene != nil}
  /// Clears the value of `spentVespene`. Subsequent reads from it will return its default value.
  mutating func clearSpentVespene() {_uniqueStorage()._spentVespene = nil}

  /// Sum of food, or supply, utilized in the categories above.
  var foodUsed: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._foodUsed ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._foodUsed = newValue}
  }
  /// Returns true if `foodUsed` has been explicitly set.
  var hasFoodUsed: Bool {return _storage._foodUsed != nil}
  /// Clears the value of `foodUsed`. Subsequent reads from it will return its default value.
  mutating func clearFoodUsed() {_uniqueStorage()._foodUsed = nil}

  /// Sum of enemies catagories destroyed in minerals.
  var killedMinerals: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._killedMinerals ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._killedMinerals = newValue}
  }
  /// Returns true if `killedMinerals` has been explicitly set.
  var hasKilledMinerals: Bool {return _storage._killedMinerals != nil}
  /// Clears the value of `killedMinerals`. Subsequent reads from it will return its default value.
  mutating func clearKilledMinerals() {_uniqueStorage()._killedMinerals = nil}

  /// Sum of enemies catagories destroyed in vespene.
  var killedVespene: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._killedVespene ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._killedVespene = newValue}
  }
  /// Returns true if `killedVespene` has been explicitly set.
  var hasKilledVespene: Bool {return _storage._killedVespene != nil}
  /// Clears the value of `killedVespene`. Subsequent reads from it will return its default value.
  mutating func clearKilledVespene() {_uniqueStorage()._killedVespene = nil}

  ///  Sum of lost minerals for the player in each category.
  var lostMinerals: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._lostMinerals ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._lostMinerals = newValue}
  }
  /// Returns true if `lostMinerals` has been explicitly set.
  var hasLostMinerals: Bool {return _storage._lostMinerals != nil}
  /// Clears the value of `lostMinerals`. Subsequent reads from it will return its default value.
  mutating func clearLostMinerals() {_uniqueStorage()._lostMinerals = nil}

  /// Sum of lost vespene for the player in each category.
  var lostVespene: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._lostVespene ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._lostVespene = newValue}
  }
  /// Returns true if `lostVespene` has been explicitly set.
  var hasLostVespene: Bool {return _storage._lostVespene != nil}
  /// Clears the value of `lostVespene`. Subsequent reads from it will return its default value.
  mutating func clearLostVespene() {_uniqueStorage()._lostVespene = nil}

  /// Sum of the lost minerals via destroying the players own units/buildings.
  var friendlyFireMinerals: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._friendlyFireMinerals ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._friendlyFireMinerals = newValue}
  }
  /// Returns true if `friendlyFireMinerals` has been explicitly set.
  var hasFriendlyFireMinerals: Bool {return _storage._friendlyFireMinerals != nil}
  /// Clears the value of `friendlyFireMinerals`. Subsequent reads from it will return its default value.
  mutating func clearFriendlyFireMinerals() {_uniqueStorage()._friendlyFireMinerals = nil}

  /// Sum of the lost vespene via destroying the players own units/buildings.
  var friendlyFireVespene: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._friendlyFireVespene ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._friendlyFireVespene = newValue}
  }
  /// Returns true if `friendlyFireVespene` has been explicitly set.
  var hasFriendlyFireVespene: Bool {return _storage._friendlyFireVespene != nil}
  /// Clears the value of `friendlyFireVespene`. Subsequent reads from it will return its default value.
  mutating func clearFriendlyFireVespene() {_uniqueStorage()._friendlyFireVespene = nil}

  /// Sum of used minerals for the player in each category for each existing unit or upgrade. Therefore if a unit died worth 50 mierals this number will be decremented by 50.
  var usedMinerals: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._usedMinerals ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._usedMinerals = newValue}
  }
  /// Returns true if `usedMinerals` has been explicitly set.
  var hasUsedMinerals: Bool {return _storage._usedMinerals != nil}
  /// Clears the value of `usedMinerals`. Subsequent reads from it will return its default value.
  mutating func clearUsedMinerals() {_uniqueStorage()._usedMinerals = nil}

  /// Sum of used vespene for the player in each category. Therefore if a unit died worth 50 vespene this number will be decremented by 50.
  var usedVespene: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._usedVespene ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._usedVespene = newValue}
  }
  /// Returns true if `usedVespene` has been explicitly set.
  var hasUsedVespene: Bool {return _storage._usedVespene != nil}
  /// Clears the value of `usedVespene`. Subsequent reads from it will return its default value.
  mutating func clearUsedVespene() {_uniqueStorage()._usedVespene = nil}

  /// Sum of used minerals throughout the entire game for each category. Unliked used_minerals, this value is never decremented.
  var totalUsedMinerals: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._totalUsedMinerals ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._totalUsedMinerals = newValue}
  }
  /// Returns true if `totalUsedMinerals` has been explicitly set.
  var hasTotalUsedMinerals: Bool {return _storage._totalUsedMinerals != nil}
  /// Clears the value of `totalUsedMinerals`. Subsequent reads from it will return its default value.
  mutating func clearTotalUsedMinerals() {_uniqueStorage()._totalUsedMinerals = nil}

  /// Sum of used vespene throughout the entire game for each category. Unliked used_vespene, this value is never decremented.
  var totalUsedVespene: SC2APIProtocol_CategoryScoreDetails {
    get {return _storage._totalUsedVespene ?? SC2APIProtocol_CategoryScoreDetails()}
    set {_uniqueStorage()._totalUsedVespene = newValue}
  }
  /// Returns true if `totalUsedVespene` has been explicitly set.
  var hasTotalUsedVespene: Bool {return _storage._totalUsedVespene != nil}
  /// Clears the value of `totalUsedVespene`. Subsequent reads from it will return its default value.
  mutating func clearTotalUsedVespene() {_uniqueStorage()._totalUsedVespene = nil}

  /// Sum of damage dealt to the player's opponent for each category.
  var totalDamageDealt: SC2APIProtocol_VitalScoreDetails {
    get {return _storage._totalDamageDealt ?? SC2APIProtocol_VitalScoreDetails()}
    set {_uniqueStorage()._totalDamageDealt = newValue}
  }
  /// Returns true if `totalDamageDealt` has been explicitly set.
  var hasTotalDamageDealt: Bool {return _storage._totalDamageDealt != nil}
  /// Clears the value of `totalDamageDealt`. Subsequent reads from it will return its default value.
  mutating func clearTotalDamageDealt() {_uniqueStorage()._totalDamageDealt = nil}

  /// Sum of damage taken by the player for each category.
  var totalDamageTaken: SC2APIProtocol_VitalScoreDetails {
    get {return _storage._totalDamageTaken ?? SC2APIProtocol_VitalScoreDetails()}
    set {_uniqueStorage()._totalDamageTaken = newValue}
  }
  /// Returns true if `totalDamageTaken` has been explicitly set.
  var hasTotalDamageTaken: Bool {return _storage._totalDamageTaken != nil}
  /// Clears the value of `totalDamageTaken`. Subsequent reads from it will return its default value.
  mutating func clearTotalDamageTaken() {_uniqueStorage()._totalDamageTaken = nil}

  /// Sum of health healed by the player. Note that technology can be healed (by queens) or repaired (by scvs).
  var totalHealed: SC2APIProtocol_VitalScoreDetails {
    get {return _storage._totalHealed ?? SC2APIProtocol_VitalScoreDetails()}
    set {_uniqueStorage()._totalHealed = newValue}
  }
  /// Returns true if `totalHealed` has been explicitly set.
  var hasTotalHealed: Bool {return _storage._totalHealed != nil}
  /// Clears the value of `totalHealed`. Subsequent reads from it will return its default value.
  mutating func clearTotalHealed() {_uniqueStorage()._totalHealed = nil}

  /// Recent raw APM.
  var currentApm: Float {
    get {return _storage._currentApm ?? 0}
    set {_uniqueStorage()._currentApm = newValue}
  }
  /// Returns true if `currentApm` has been explicitly set.
  var hasCurrentApm: Bool {return _storage._currentApm != nil}
  /// Clears the value of `currentApm`. Subsequent reads from it will return its default value.
  mutating func clearCurrentApm() {_uniqueStorage()._currentApm = nil}

  /// Recent effective APM.
  var currentEffectiveApm: Float {
    get {return _storage._currentEffectiveApm ?? 0}
    set {_uniqueStorage()._currentEffectiveApm = newValue}
  }
  /// Returns true if `currentEffectiveApm` has been explicitly set.
  var hasCurrentEffectiveApm: Bool {return _storage._currentEffectiveApm != nil}
  /// Clears the value of `currentEffectiveApm`. Subsequent reads from it will return its default value.
  mutating func clearCurrentEffectiveApm() {_uniqueStorage()._currentEffectiveApm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SC2APIProtocol"

extension SC2APIProtocol_Score: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Score"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .standard(proto: "score_type"),
    7: .same(proto: "score"),
    8: .standard(proto: "score_details"),
  ]

  fileprivate class _StorageClass {
    var _scoreType: SC2APIProtocol_Score.ScoreType? = nil
    var _score: Int32? = nil
    var _scoreDetails: SC2APIProtocol_ScoreDetails? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scoreType = source._scoreType
      _score = source._score
      _scoreDetails = source._scoreDetails
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 6: try decoder.decodeSingularEnumField(value: &_storage._scoreType)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._score)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._scoreDetails)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._scoreType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._score {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._scoreDetails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_Score, rhs: SC2APIProtocol_Score) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._scoreType != rhs_storage._scoreType {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._scoreDetails != rhs_storage._scoreDetails {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_Score.ScoreType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Curriculum"),
    2: .same(proto: "Melee"),
  ]
}

extension SC2APIProtocol_CategoryScoreDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CategoryScoreDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "none"),
    2: .same(proto: "army"),
    3: .same(proto: "economy"),
    4: .same(proto: "technology"),
    5: .same(proto: "upgrade"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._none)
      case 2: try decoder.decodeSingularFloatField(value: &self._army)
      case 3: try decoder.decodeSingularFloatField(value: &self._economy)
      case 4: try decoder.decodeSingularFloatField(value: &self._technology)
      case 5: try decoder.decodeSingularFloatField(value: &self._upgrade)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._none {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    if let v = self._army {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._economy {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._technology {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._upgrade {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_CategoryScoreDetails, rhs: SC2APIProtocol_CategoryScoreDetails) -> Bool {
    if lhs._none != rhs._none {return false}
    if lhs._army != rhs._army {return false}
    if lhs._economy != rhs._economy {return false}
    if lhs._technology != rhs._technology {return false}
    if lhs._upgrade != rhs._upgrade {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_VitalScoreDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VitalScoreDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "life"),
    2: .same(proto: "shields"),
    3: .same(proto: "energy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._life)
      case 2: try decoder.decodeSingularFloatField(value: &self._shields)
      case 3: try decoder.decodeSingularFloatField(value: &self._energy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._life {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    if let v = self._shields {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._energy {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_VitalScoreDetails, rhs: SC2APIProtocol_VitalScoreDetails) -> Bool {
    if lhs._life != rhs._life {return false}
    if lhs._shields != rhs._shields {return false}
    if lhs._energy != rhs._energy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ScoreDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScoreDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "idle_production_time"),
    2: .standard(proto: "idle_worker_time"),
    3: .standard(proto: "total_value_units"),
    4: .standard(proto: "total_value_structures"),
    5: .standard(proto: "killed_value_units"),
    6: .standard(proto: "killed_value_structures"),
    7: .standard(proto: "collected_minerals"),
    8: .standard(proto: "collected_vespene"),
    9: .standard(proto: "collection_rate_minerals"),
    10: .standard(proto: "collection_rate_vespene"),
    11: .standard(proto: "spent_minerals"),
    12: .standard(proto: "spent_vespene"),
    13: .standard(proto: "food_used"),
    14: .standard(proto: "killed_minerals"),
    15: .standard(proto: "killed_vespene"),
    16: .standard(proto: "lost_minerals"),
    17: .standard(proto: "lost_vespene"),
    18: .standard(proto: "friendly_fire_minerals"),
    19: .standard(proto: "friendly_fire_vespene"),
    20: .standard(proto: "used_minerals"),
    21: .standard(proto: "used_vespene"),
    22: .standard(proto: "total_used_minerals"),
    23: .standard(proto: "total_used_vespene"),
    24: .standard(proto: "total_damage_dealt"),
    25: .standard(proto: "total_damage_taken"),
    26: .standard(proto: "total_healed"),
    27: .standard(proto: "current_apm"),
    28: .standard(proto: "current_effective_apm"),
  ]

  fileprivate class _StorageClass {
    var _idleProductionTime: Float? = nil
    var _idleWorkerTime: Float? = nil
    var _totalValueUnits: Float? = nil
    var _totalValueStructures: Float? = nil
    var _killedValueUnits: Float? = nil
    var _killedValueStructures: Float? = nil
    var _collectedMinerals: Float? = nil
    var _collectedVespene: Float? = nil
    var _collectionRateMinerals: Float? = nil
    var _collectionRateVespene: Float? = nil
    var _spentMinerals: Float? = nil
    var _spentVespene: Float? = nil
    var _foodUsed: SC2APIProtocol_CategoryScoreDetails? = nil
    var _killedMinerals: SC2APIProtocol_CategoryScoreDetails? = nil
    var _killedVespene: SC2APIProtocol_CategoryScoreDetails? = nil
    var _lostMinerals: SC2APIProtocol_CategoryScoreDetails? = nil
    var _lostVespene: SC2APIProtocol_CategoryScoreDetails? = nil
    var _friendlyFireMinerals: SC2APIProtocol_CategoryScoreDetails? = nil
    var _friendlyFireVespene: SC2APIProtocol_CategoryScoreDetails? = nil
    var _usedMinerals: SC2APIProtocol_CategoryScoreDetails? = nil
    var _usedVespene: SC2APIProtocol_CategoryScoreDetails? = nil
    var _totalUsedMinerals: SC2APIProtocol_CategoryScoreDetails? = nil
    var _totalUsedVespene: SC2APIProtocol_CategoryScoreDetails? = nil
    var _totalDamageDealt: SC2APIProtocol_VitalScoreDetails? = nil
    var _totalDamageTaken: SC2APIProtocol_VitalScoreDetails? = nil
    var _totalHealed: SC2APIProtocol_VitalScoreDetails? = nil
    var _currentApm: Float? = nil
    var _currentEffectiveApm: Float? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _idleProductionTime = source._idleProductionTime
      _idleWorkerTime = source._idleWorkerTime
      _totalValueUnits = source._totalValueUnits
      _totalValueStructures = source._totalValueStructures
      _killedValueUnits = source._killedValueUnits
      _killedValueStructures = source._killedValueStructures
      _collectedMinerals = source._collectedMinerals
      _collectedVespene = source._collectedVespene
      _collectionRateMinerals = source._collectionRateMinerals
      _collectionRateVespene = source._collectionRateVespene
      _spentMinerals = source._spentMinerals
      _spentVespene = source._spentVespene
      _foodUsed = source._foodUsed
      _killedMinerals = source._killedMinerals
      _killedVespene = source._killedVespene
      _lostMinerals = source._lostMinerals
      _lostVespene = source._lostVespene
      _friendlyFireMinerals = source._friendlyFireMinerals
      _friendlyFireVespene = source._friendlyFireVespene
      _usedMinerals = source._usedMinerals
      _usedVespene = source._usedVespene
      _totalUsedMinerals = source._totalUsedMinerals
      _totalUsedVespene = source._totalUsedVespene
      _totalDamageDealt = source._totalDamageDealt
      _totalDamageTaken = source._totalDamageTaken
      _totalHealed = source._totalHealed
      _currentApm = source._currentApm
      _currentEffectiveApm = source._currentEffectiveApm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &_storage._idleProductionTime)
        case 2: try decoder.decodeSingularFloatField(value: &_storage._idleWorkerTime)
        case 3: try decoder.decodeSingularFloatField(value: &_storage._totalValueUnits)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._totalValueStructures)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._killedValueUnits)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._killedValueStructures)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._collectedMinerals)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._collectedVespene)
        case 9: try decoder.decodeSingularFloatField(value: &_storage._collectionRateMinerals)
        case 10: try decoder.decodeSingularFloatField(value: &_storage._collectionRateVespene)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._spentMinerals)
        case 12: try decoder.decodeSingularFloatField(value: &_storage._spentVespene)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._foodUsed)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._killedMinerals)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._killedVespene)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._lostMinerals)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._lostVespene)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._friendlyFireMinerals)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._friendlyFireVespene)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._usedMinerals)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._usedVespene)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._totalUsedMinerals)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._totalUsedVespene)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._totalDamageDealt)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._totalDamageTaken)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._totalHealed)
        case 27: try decoder.decodeSingularFloatField(value: &_storage._currentApm)
        case 28: try decoder.decodeSingularFloatField(value: &_storage._currentEffectiveApm)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._idleProductionTime {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
      }
      if let v = _storage._idleWorkerTime {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
      }
      if let v = _storage._totalValueUnits {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
      }
      if let v = _storage._totalValueStructures {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
      }
      if let v = _storage._killedValueUnits {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
      }
      if let v = _storage._killedValueStructures {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
      }
      if let v = _storage._collectedMinerals {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      }
      if let v = _storage._collectedVespene {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
      }
      if let v = _storage._collectionRateMinerals {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      }
      if let v = _storage._collectionRateVespene {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      }
      if let v = _storage._spentMinerals {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._spentVespene {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
      }
      if let v = _storage._foodUsed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._killedMinerals {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._killedVespene {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._lostMinerals {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._lostVespene {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._friendlyFireMinerals {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._friendlyFireVespene {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._usedMinerals {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._usedVespene {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._totalUsedMinerals {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._totalUsedVespene {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._totalDamageDealt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._totalDamageTaken {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._totalHealed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._currentApm {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 27)
      }
      if let v = _storage._currentEffectiveApm {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 28)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ScoreDetails, rhs: SC2APIProtocol_ScoreDetails) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._idleProductionTime != rhs_storage._idleProductionTime {return false}
        if _storage._idleWorkerTime != rhs_storage._idleWorkerTime {return false}
        if _storage._totalValueUnits != rhs_storage._totalValueUnits {return false}
        if _storage._totalValueStructures != rhs_storage._totalValueStructures {return false}
        if _storage._killedValueUnits != rhs_storage._killedValueUnits {return false}
        if _storage._killedValueStructures != rhs_storage._killedValueStructures {return false}
        if _storage._collectedMinerals != rhs_storage._collectedMinerals {return false}
        if _storage._collectedVespene != rhs_storage._collectedVespene {return false}
        if _storage._collectionRateMinerals != rhs_storage._collectionRateMinerals {return false}
        if _storage._collectionRateVespene != rhs_storage._collectionRateVespene {return false}
        if _storage._spentMinerals != rhs_storage._spentMinerals {return false}
        if _storage._spentVespene != rhs_storage._spentVespene {return false}
        if _storage._foodUsed != rhs_storage._foodUsed {return false}
        if _storage._killedMinerals != rhs_storage._killedMinerals {return false}
        if _storage._killedVespene != rhs_storage._killedVespene {return false}
        if _storage._lostMinerals != rhs_storage._lostMinerals {return false}
        if _storage._lostVespene != rhs_storage._lostVespene {return false}
        if _storage._friendlyFireMinerals != rhs_storage._friendlyFireMinerals {return false}
        if _storage._friendlyFireVespene != rhs_storage._friendlyFireVespene {return false}
        if _storage._usedMinerals != rhs_storage._usedMinerals {return false}
        if _storage._usedVespene != rhs_storage._usedVespene {return false}
        if _storage._totalUsedMinerals != rhs_storage._totalUsedMinerals {return false}
        if _storage._totalUsedVespene != rhs_storage._totalUsedVespene {return false}
        if _storage._totalDamageDealt != rhs_storage._totalDamageDealt {return false}
        if _storage._totalDamageTaken != rhs_storage._totalDamageTaken {return false}
        if _storage._totalHealed != rhs_storage._totalHealed {return false}
        if _storage._currentApm != rhs_storage._currentApm {return false}
        if _storage._currentEffectiveApm != rhs_storage._currentEffectiveApm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
