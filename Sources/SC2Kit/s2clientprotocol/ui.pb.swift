// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: s2clientprotocol/ui.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SC2APIProtocol_ObservationUI {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groups: [SC2APIProtocol_ControlGroup] {
    get {return _storage._groups}
    set {_uniqueStorage()._groups = newValue}
  }

  var panel: OneOf_Panel? {
    get {return _storage._panel}
    set {_uniqueStorage()._panel = newValue}
  }

  var single: SC2APIProtocol_SinglePanel {
    get {
      if case .single(let v)? = _storage._panel {return v}
      return SC2APIProtocol_SinglePanel()
    }
    set {_uniqueStorage()._panel = .single(newValue)}
  }

  var multi: SC2APIProtocol_MultiPanel {
    get {
      if case .multi(let v)? = _storage._panel {return v}
      return SC2APIProtocol_MultiPanel()
    }
    set {_uniqueStorage()._panel = .multi(newValue)}
  }

  var cargo: SC2APIProtocol_CargoPanel {
    get {
      if case .cargo(let v)? = _storage._panel {return v}
      return SC2APIProtocol_CargoPanel()
    }
    set {_uniqueStorage()._panel = .cargo(newValue)}
  }

  var production: SC2APIProtocol_ProductionPanel {
    get {
      if case .production(let v)? = _storage._panel {return v}
      return SC2APIProtocol_ProductionPanel()
    }
    set {_uniqueStorage()._panel = .production(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Panel: Equatable {
    case single(SC2APIProtocol_SinglePanel)
    case multi(SC2APIProtocol_MultiPanel)
    case cargo(SC2APIProtocol_CargoPanel)
    case production(SC2APIProtocol_ProductionPanel)

  #if !swift(>=4.1)
    static func ==(lhs: SC2APIProtocol_ObservationUI.OneOf_Panel, rhs: SC2APIProtocol_ObservationUI.OneOf_Panel) -> Bool {
      switch (lhs, rhs) {
      case (.single(let l), .single(let r)): return l == r
      case (.multi(let l), .multi(let r)): return l == r
      case (.cargo(let l), .cargo(let r)): return l == r
      case (.production(let l), .production(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SC2APIProtocol_ControlGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var controlGroupIndex: UInt32 {
    get {return _controlGroupIndex ?? 0}
    set {_controlGroupIndex = newValue}
  }
  /// Returns true if `controlGroupIndex` has been explicitly set.
  var hasControlGroupIndex: Bool {return self._controlGroupIndex != nil}
  /// Clears the value of `controlGroupIndex`. Subsequent reads from it will return its default value.
  mutating func clearControlGroupIndex() {self._controlGroupIndex = nil}

  var leaderUnitType: UInt32 {
    get {return _leaderUnitType ?? 0}
    set {_leaderUnitType = newValue}
  }
  /// Returns true if `leaderUnitType` has been explicitly set.
  var hasLeaderUnitType: Bool {return self._leaderUnitType != nil}
  /// Clears the value of `leaderUnitType`. Subsequent reads from it will return its default value.
  mutating func clearLeaderUnitType() {self._leaderUnitType = nil}

  var count: UInt32 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _controlGroupIndex: UInt32? = nil
  fileprivate var _leaderUnitType: UInt32? = nil
  fileprivate var _count: UInt32? = nil
}

struct SC2APIProtocol_UnitInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unitType: UInt32 {
    get {return _storage._unitType ?? 0}
    set {_uniqueStorage()._unitType = newValue}
  }
  /// Returns true if `unitType` has been explicitly set.
  var hasUnitType: Bool {return _storage._unitType != nil}
  /// Clears the value of `unitType`. Subsequent reads from it will return its default value.
  mutating func clearUnitType() {_uniqueStorage()._unitType = nil}

  var playerRelative: UInt32 {
    get {return _storage._playerRelative ?? 0}
    set {_uniqueStorage()._playerRelative = newValue}
  }
  /// Returns true if `playerRelative` has been explicitly set.
  var hasPlayerRelative: Bool {return _storage._playerRelative != nil}
  /// Clears the value of `playerRelative`. Subsequent reads from it will return its default value.
  mutating func clearPlayerRelative() {_uniqueStorage()._playerRelative = nil}

  var health: Int32 {
    get {return _storage._health ?? 0}
    set {_uniqueStorage()._health = newValue}
  }
  /// Returns true if `health` has been explicitly set.
  var hasHealth: Bool {return _storage._health != nil}
  /// Clears the value of `health`. Subsequent reads from it will return its default value.
  mutating func clearHealth() {_uniqueStorage()._health = nil}

  var shields: Int32 {
    get {return _storage._shields ?? 0}
    set {_uniqueStorage()._shields = newValue}
  }
  /// Returns true if `shields` has been explicitly set.
  var hasShields: Bool {return _storage._shields != nil}
  /// Clears the value of `shields`. Subsequent reads from it will return its default value.
  mutating func clearShields() {_uniqueStorage()._shields = nil}

  var energy: Int32 {
    get {return _storage._energy ?? 0}
    set {_uniqueStorage()._energy = newValue}
  }
  /// Returns true if `energy` has been explicitly set.
  var hasEnergy: Bool {return _storage._energy != nil}
  /// Clears the value of `energy`. Subsequent reads from it will return its default value.
  mutating func clearEnergy() {_uniqueStorage()._energy = nil}

  var transportSlotsTaken: Int32 {
    get {return _storage._transportSlotsTaken ?? 0}
    set {_uniqueStorage()._transportSlotsTaken = newValue}
  }
  /// Returns true if `transportSlotsTaken` has been explicitly set.
  var hasTransportSlotsTaken: Bool {return _storage._transportSlotsTaken != nil}
  /// Clears the value of `transportSlotsTaken`. Subsequent reads from it will return its default value.
  mutating func clearTransportSlotsTaken() {_uniqueStorage()._transportSlotsTaken = nil}

  /// Range: [0.0, 1.0]
  var buildProgress: Float {
    get {return _storage._buildProgress ?? 0}
    set {_uniqueStorage()._buildProgress = newValue}
  }
  /// Returns true if `buildProgress` has been explicitly set.
  var hasBuildProgress: Bool {return _storage._buildProgress != nil}
  /// Clears the value of `buildProgress`. Subsequent reads from it will return its default value.
  mutating func clearBuildProgress() {_uniqueStorage()._buildProgress = nil}

  var addOn: SC2APIProtocol_UnitInfo {
    get {return _storage._addOn ?? SC2APIProtocol_UnitInfo()}
    set {_uniqueStorage()._addOn = newValue}
  }
  /// Returns true if `addOn` has been explicitly set.
  var hasAddOn: Bool {return _storage._addOn != nil}
  /// Clears the value of `addOn`. Subsequent reads from it will return its default value.
  mutating func clearAddOn() {_uniqueStorage()._addOn = nil}

  var maxHealth: Int32 {
    get {return _storage._maxHealth ?? 0}
    set {_uniqueStorage()._maxHealth = newValue}
  }
  /// Returns true if `maxHealth` has been explicitly set.
  var hasMaxHealth: Bool {return _storage._maxHealth != nil}
  /// Clears the value of `maxHealth`. Subsequent reads from it will return its default value.
  mutating func clearMaxHealth() {_uniqueStorage()._maxHealth = nil}

  var maxShields: Int32 {
    get {return _storage._maxShields ?? 0}
    set {_uniqueStorage()._maxShields = newValue}
  }
  /// Returns true if `maxShields` has been explicitly set.
  var hasMaxShields: Bool {return _storage._maxShields != nil}
  /// Clears the value of `maxShields`. Subsequent reads from it will return its default value.
  mutating func clearMaxShields() {_uniqueStorage()._maxShields = nil}

  var maxEnergy: Int32 {
    get {return _storage._maxEnergy ?? 0}
    set {_uniqueStorage()._maxEnergy = newValue}
  }
  /// Returns true if `maxEnergy` has been explicitly set.
  var hasMaxEnergy: Bool {return _storage._maxEnergy != nil}
  /// Clears the value of `maxEnergy`. Subsequent reads from it will return its default value.
  mutating func clearMaxEnergy() {_uniqueStorage()._maxEnergy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SC2APIProtocol_SinglePanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unit: SC2APIProtocol_UnitInfo {
    get {return _storage._unit ?? SC2APIProtocol_UnitInfo()}
    set {_uniqueStorage()._unit = newValue}
  }
  /// Returns true if `unit` has been explicitly set.
  var hasUnit: Bool {return _storage._unit != nil}
  /// Clears the value of `unit`. Subsequent reads from it will return its default value.
  mutating func clearUnit() {_uniqueStorage()._unit = nil}

  var attackUpgradeLevel: Int32 {
    get {return _storage._attackUpgradeLevel ?? 0}
    set {_uniqueStorage()._attackUpgradeLevel = newValue}
  }
  /// Returns true if `attackUpgradeLevel` has been explicitly set.
  var hasAttackUpgradeLevel: Bool {return _storage._attackUpgradeLevel != nil}
  /// Clears the value of `attackUpgradeLevel`. Subsequent reads from it will return its default value.
  mutating func clearAttackUpgradeLevel() {_uniqueStorage()._attackUpgradeLevel = nil}

  var armorUpgradeLevel: Int32 {
    get {return _storage._armorUpgradeLevel ?? 0}
    set {_uniqueStorage()._armorUpgradeLevel = newValue}
  }
  /// Returns true if `armorUpgradeLevel` has been explicitly set.
  var hasArmorUpgradeLevel: Bool {return _storage._armorUpgradeLevel != nil}
  /// Clears the value of `armorUpgradeLevel`. Subsequent reads from it will return its default value.
  mutating func clearArmorUpgradeLevel() {_uniqueStorage()._armorUpgradeLevel = nil}

  var shieldUpgradeLevel: Int32 {
    get {return _storage._shieldUpgradeLevel ?? 0}
    set {_uniqueStorage()._shieldUpgradeLevel = newValue}
  }
  /// Returns true if `shieldUpgradeLevel` has been explicitly set.
  var hasShieldUpgradeLevel: Bool {return _storage._shieldUpgradeLevel != nil}
  /// Clears the value of `shieldUpgradeLevel`. Subsequent reads from it will return its default value.
  mutating func clearShieldUpgradeLevel() {_uniqueStorage()._shieldUpgradeLevel = nil}

  var buffs: [Int32] {
    get {return _storage._buffs}
    set {_uniqueStorage()._buffs = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SC2APIProtocol_MultiPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var units: [SC2APIProtocol_UnitInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SC2APIProtocol_CargoPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unit: SC2APIProtocol_UnitInfo {
    get {return _storage._unit ?? SC2APIProtocol_UnitInfo()}
    set {_uniqueStorage()._unit = newValue}
  }
  /// Returns true if `unit` has been explicitly set.
  var hasUnit: Bool {return _storage._unit != nil}
  /// Clears the value of `unit`. Subsequent reads from it will return its default value.
  mutating func clearUnit() {_uniqueStorage()._unit = nil}

  var passengers: [SC2APIProtocol_UnitInfo] {
    get {return _storage._passengers}
    set {_uniqueStorage()._passengers = newValue}
  }

  /// TODO: Change to cargo size
  var slotsAvailable: Int32 {
    get {return _storage._slotsAvailable ?? 0}
    set {_uniqueStorage()._slotsAvailable = newValue}
  }
  /// Returns true if `slotsAvailable` has been explicitly set.
  var hasSlotsAvailable: Bool {return _storage._slotsAvailable != nil}
  /// Clears the value of `slotsAvailable`. Subsequent reads from it will return its default value.
  mutating func clearSlotsAvailable() {_uniqueStorage()._slotsAvailable = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SC2APIProtocol_BuildItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var abilityID: UInt32 {
    get {return _abilityID ?? 0}
    set {_abilityID = newValue}
  }
  /// Returns true if `abilityID` has been explicitly set.
  var hasAbilityID: Bool {return self._abilityID != nil}
  /// Clears the value of `abilityID`. Subsequent reads from it will return its default value.
  mutating func clearAbilityID() {self._abilityID = nil}

  /// Range: [0.0, 1.0]
  var buildProgress: Float {
    get {return _buildProgress ?? 0}
    set {_buildProgress = newValue}
  }
  /// Returns true if `buildProgress` has been explicitly set.
  var hasBuildProgress: Bool {return self._buildProgress != nil}
  /// Clears the value of `buildProgress`. Subsequent reads from it will return its default value.
  mutating func clearBuildProgress() {self._buildProgress = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _abilityID: UInt32? = nil
  fileprivate var _buildProgress: Float? = nil
}

struct SC2APIProtocol_ProductionPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unit: SC2APIProtocol_UnitInfo {
    get {return _storage._unit ?? SC2APIProtocol_UnitInfo()}
    set {_uniqueStorage()._unit = newValue}
  }
  /// Returns true if `unit` has been explicitly set.
  var hasUnit: Bool {return _storage._unit != nil}
  /// Clears the value of `unit`. Subsequent reads from it will return its default value.
  mutating func clearUnit() {_uniqueStorage()._unit = nil}

  /// build_queue ONLY gives information about units that are being produced.
  /// Use production_queue instead to see both units being trained as well as research in the queue.
  var buildQueue: [SC2APIProtocol_UnitInfo] {
    get {return _storage._buildQueue}
    set {_uniqueStorage()._buildQueue = newValue}
  }

  var productionQueue: [SC2APIProtocol_BuildItem] {
    get {return _storage._productionQueue}
    set {_uniqueStorage()._productionQueue = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SC2APIProtocol_ActionUI {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: OneOf_Action? {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  var controlGroup: SC2APIProtocol_ActionControlGroup {
    get {
      if case .controlGroup(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionControlGroup()
    }
    set {_uniqueStorage()._action = .controlGroup(newValue)}
  }

  var selectArmy: SC2APIProtocol_ActionSelectArmy {
    get {
      if case .selectArmy(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionSelectArmy()
    }
    set {_uniqueStorage()._action = .selectArmy(newValue)}
  }

  var selectWarpGates: SC2APIProtocol_ActionSelectWarpGates {
    get {
      if case .selectWarpGates(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionSelectWarpGates()
    }
    set {_uniqueStorage()._action = .selectWarpGates(newValue)}
  }

  var selectLarva: SC2APIProtocol_ActionSelectLarva {
    get {
      if case .selectLarva(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionSelectLarva()
    }
    set {_uniqueStorage()._action = .selectLarva(newValue)}
  }

  var selectIdleWorker: SC2APIProtocol_ActionSelectIdleWorker {
    get {
      if case .selectIdleWorker(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionSelectIdleWorker()
    }
    set {_uniqueStorage()._action = .selectIdleWorker(newValue)}
  }

  var multiPanel: SC2APIProtocol_ActionMultiPanel {
    get {
      if case .multiPanel(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionMultiPanel()
    }
    set {_uniqueStorage()._action = .multiPanel(newValue)}
  }

  var cargoPanel: SC2APIProtocol_ActionCargoPanelUnload {
    get {
      if case .cargoPanel(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionCargoPanelUnload()
    }
    set {_uniqueStorage()._action = .cargoPanel(newValue)}
  }

  var productionPanel: SC2APIProtocol_ActionProductionPanelRemoveFromQueue {
    get {
      if case .productionPanel(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionProductionPanelRemoveFromQueue()
    }
    set {_uniqueStorage()._action = .productionPanel(newValue)}
  }

  var toggleAutocast: SC2APIProtocol_ActionToggleAutocast {
    get {
      if case .toggleAutocast(let v)? = _storage._action {return v}
      return SC2APIProtocol_ActionToggleAutocast()
    }
    set {_uniqueStorage()._action = .toggleAutocast(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Action: Equatable {
    case controlGroup(SC2APIProtocol_ActionControlGroup)
    case selectArmy(SC2APIProtocol_ActionSelectArmy)
    case selectWarpGates(SC2APIProtocol_ActionSelectWarpGates)
    case selectLarva(SC2APIProtocol_ActionSelectLarva)
    case selectIdleWorker(SC2APIProtocol_ActionSelectIdleWorker)
    case multiPanel(SC2APIProtocol_ActionMultiPanel)
    case cargoPanel(SC2APIProtocol_ActionCargoPanelUnload)
    case productionPanel(SC2APIProtocol_ActionProductionPanelRemoveFromQueue)
    case toggleAutocast(SC2APIProtocol_ActionToggleAutocast)

  #if !swift(>=4.1)
    static func ==(lhs: SC2APIProtocol_ActionUI.OneOf_Action, rhs: SC2APIProtocol_ActionUI.OneOf_Action) -> Bool {
      switch (lhs, rhs) {
      case (.controlGroup(let l), .controlGroup(let r)): return l == r
      case (.selectArmy(let l), .selectArmy(let r)): return l == r
      case (.selectWarpGates(let l), .selectWarpGates(let r)): return l == r
      case (.selectLarva(let l), .selectLarva(let r)): return l == r
      case (.selectIdleWorker(let l), .selectIdleWorker(let r)): return l == r
      case (.multiPanel(let l), .multiPanel(let r)): return l == r
      case (.cargoPanel(let l), .cargoPanel(let r)): return l == r
      case (.productionPanel(let l), .productionPanel(let r)): return l == r
      case (.toggleAutocast(let l), .toggleAutocast(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SC2APIProtocol_ActionControlGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: SC2APIProtocol_ActionControlGroup.ControlGroupAction {
    get {return _action ?? .recall}
    set {_action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return self._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {self._action = nil}

  var controlGroupIndex: UInt32 {
    get {return _controlGroupIndex ?? 0}
    set {_controlGroupIndex = newValue}
  }
  /// Returns true if `controlGroupIndex` has been explicitly set.
  var hasControlGroupIndex: Bool {return self._controlGroupIndex != nil}
  /// Clears the value of `controlGroupIndex`. Subsequent reads from it will return its default value.
  mutating func clearControlGroupIndex() {self._controlGroupIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ControlGroupAction: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Equivalent to number hotkey. Replaces current selection with control group.
    case recall // = 1

    /// Equivalent to Control + number hotkey. Sets control group to current selection.
    case set // = 2

    /// Equivalent to Shift + number hotkey. Adds current selection into control group.
    case append // = 3

    /// Equivalent to Control + Alt + number hotkey. Sets control group to current selection. Units are removed from other control groups.
    case setAndSteal // = 4

    /// Equivalent to Shift + Alt + number hotkey. Adds current selection into control group. Units are removed from other control groups.
    case appendAndSteal // = 5

    init() {
      self = .recall
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .recall
      case 2: self = .set
      case 3: self = .append
      case 4: self = .setAndSteal
      case 5: self = .appendAndSteal
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .recall: return 1
      case .set: return 2
      case .append: return 3
      case .setAndSteal: return 4
      case .appendAndSteal: return 5
      }
    }

  }

  init() {}

  fileprivate var _action: SC2APIProtocol_ActionControlGroup.ControlGroupAction? = nil
  fileprivate var _controlGroupIndex: UInt32? = nil
}

#if swift(>=4.2)

extension SC2APIProtocol_ActionControlGroup.ControlGroupAction: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct SC2APIProtocol_ActionSelectArmy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selectionAdd: Bool {
    get {return _selectionAdd ?? false}
    set {_selectionAdd = newValue}
  }
  /// Returns true if `selectionAdd` has been explicitly set.
  var hasSelectionAdd: Bool {return self._selectionAdd != nil}
  /// Clears the value of `selectionAdd`. Subsequent reads from it will return its default value.
  mutating func clearSelectionAdd() {self._selectionAdd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _selectionAdd: Bool? = nil
}

struct SC2APIProtocol_ActionSelectWarpGates {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selectionAdd: Bool {
    get {return _selectionAdd ?? false}
    set {_selectionAdd = newValue}
  }
  /// Returns true if `selectionAdd` has been explicitly set.
  var hasSelectionAdd: Bool {return self._selectionAdd != nil}
  /// Clears the value of `selectionAdd`. Subsequent reads from it will return its default value.
  mutating func clearSelectionAdd() {self._selectionAdd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _selectionAdd: Bool? = nil
}

struct SC2APIProtocol_ActionSelectLarva {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SC2APIProtocol_ActionSelectIdleWorker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: SC2APIProtocol_ActionSelectIdleWorker.TypeEnum {
    get {return _type ?? .set}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Equivalent to click with no modifiers. Replaces selection with single idle worker.
    case set // = 1

    /// Equivalent to shift+click. Adds single idle worker to current selection.
    case add // = 2

    /// Equivalent to control+click. Selects all idle workers.
    case all // = 3

    /// Equivalent to shift+control+click. Adds all idle workers to current selection.
    case addAll // = 4

    init() {
      self = .set
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .set
      case 2: self = .add
      case 3: self = .all
      case 4: self = .addAll
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .set: return 1
      case .add: return 2
      case .all: return 3
      case .addAll: return 4
      }
    }

  }

  init() {}

  fileprivate var _type: SC2APIProtocol_ActionSelectIdleWorker.TypeEnum? = nil
}

#if swift(>=4.2)

extension SC2APIProtocol_ActionSelectIdleWorker.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct SC2APIProtocol_ActionMultiPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: SC2APIProtocol_ActionMultiPanel.TypeEnum {
    get {return _type ?? .singleSelect}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unitIndex: Int32 {
    get {return _unitIndex ?? 0}
    set {_unitIndex = newValue}
  }
  /// Returns true if `unitIndex` has been explicitly set.
  var hasUnitIndex: Bool {return self._unitIndex != nil}
  /// Clears the value of `unitIndex`. Subsequent reads from it will return its default value.
  mutating func clearUnitIndex() {self._unitIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Click on icon
    case singleSelect // = 1

    /// Shift Click on icon
    case deselectUnit // = 2

    /// Control Click on icon.
    case selectAllOfType // = 3

    /// Control+Shift Click on icon.
    case deselectAllOfType // = 4

    init() {
      self = .singleSelect
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .singleSelect
      case 2: self = .deselectUnit
      case 3: self = .selectAllOfType
      case 4: self = .deselectAllOfType
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .singleSelect: return 1
      case .deselectUnit: return 2
      case .selectAllOfType: return 3
      case .deselectAllOfType: return 4
      }
    }

  }

  init() {}

  fileprivate var _type: SC2APIProtocol_ActionMultiPanel.TypeEnum? = nil
  fileprivate var _unitIndex: Int32? = nil
}

#if swift(>=4.2)

extension SC2APIProtocol_ActionMultiPanel.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct SC2APIProtocol_ActionCargoPanelUnload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unitIndex: Int32 {
    get {return _unitIndex ?? 0}
    set {_unitIndex = newValue}
  }
  /// Returns true if `unitIndex` has been explicitly set.
  var hasUnitIndex: Bool {return self._unitIndex != nil}
  /// Clears the value of `unitIndex`. Subsequent reads from it will return its default value.
  mutating func clearUnitIndex() {self._unitIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unitIndex: Int32? = nil
}

struct SC2APIProtocol_ActionProductionPanelRemoveFromQueue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unitIndex: Int32 {
    get {return _unitIndex ?? 0}
    set {_unitIndex = newValue}
  }
  /// Returns true if `unitIndex` has been explicitly set.
  var hasUnitIndex: Bool {return self._unitIndex != nil}
  /// Clears the value of `unitIndex`. Subsequent reads from it will return its default value.
  mutating func clearUnitIndex() {self._unitIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unitIndex: Int32? = nil
}

struct SC2APIProtocol_ActionToggleAutocast {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var abilityID: Int32 {
    get {return _abilityID ?? 0}
    set {_abilityID = newValue}
  }
  /// Returns true if `abilityID` has been explicitly set.
  var hasAbilityID: Bool {return self._abilityID != nil}
  /// Clears the value of `abilityID`. Subsequent reads from it will return its default value.
  mutating func clearAbilityID() {self._abilityID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _abilityID: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SC2APIProtocol"

extension SC2APIProtocol_ObservationUI: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObservationUI"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groups"),
    2: .same(proto: "single"),
    3: .same(proto: "multi"),
    4: .same(proto: "cargo"),
    5: .same(proto: "production"),
  ]

  fileprivate class _StorageClass {
    var _groups: [SC2APIProtocol_ControlGroup] = []
    var _panel: SC2APIProtocol_ObservationUI.OneOf_Panel?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _groups = source._groups
      _panel = source._panel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._groups)
        case 2:
          var v: SC2APIProtocol_SinglePanel?
          if let current = _storage._panel {
            try decoder.handleConflictingOneOf()
            if case .single(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._panel = .single(v)}
        case 3:
          var v: SC2APIProtocol_MultiPanel?
          if let current = _storage._panel {
            try decoder.handleConflictingOneOf()
            if case .multi(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._panel = .multi(v)}
        case 4:
          var v: SC2APIProtocol_CargoPanel?
          if let current = _storage._panel {
            try decoder.handleConflictingOneOf()
            if case .cargo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._panel = .cargo(v)}
        case 5:
          var v: SC2APIProtocol_ProductionPanel?
          if let current = _storage._panel {
            try decoder.handleConflictingOneOf()
            if case .production(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._panel = .production(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._groups.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._groups, fieldNumber: 1)
      }
      switch _storage._panel {
      case .single(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .multi(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .cargo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .production(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ObservationUI, rhs: SC2APIProtocol_ObservationUI) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._groups != rhs_storage._groups {return false}
        if _storage._panel != rhs_storage._panel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ControlGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ControlGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "control_group_index"),
    2: .standard(proto: "leader_unit_type"),
    3: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._controlGroupIndex)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._leaderUnitType)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._controlGroupIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._leaderUnitType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._count {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ControlGroup, rhs: SC2APIProtocol_ControlGroup) -> Bool {
    if lhs._controlGroupIndex != rhs._controlGroupIndex {return false}
    if lhs._leaderUnitType != rhs._leaderUnitType {return false}
    if lhs._count != rhs._count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_UnitInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnitInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unit_type"),
    2: .standard(proto: "player_relative"),
    3: .same(proto: "health"),
    4: .same(proto: "shields"),
    5: .same(proto: "energy"),
    6: .standard(proto: "transport_slots_taken"),
    7: .standard(proto: "build_progress"),
    8: .standard(proto: "add_on"),
    9: .standard(proto: "max_health"),
    10: .standard(proto: "max_shields"),
    11: .standard(proto: "max_energy"),
  ]

  fileprivate class _StorageClass {
    var _unitType: UInt32? = nil
    var _playerRelative: UInt32? = nil
    var _health: Int32? = nil
    var _shields: Int32? = nil
    var _energy: Int32? = nil
    var _transportSlotsTaken: Int32? = nil
    var _buildProgress: Float? = nil
    var _addOn: SC2APIProtocol_UnitInfo? = nil
    var _maxHealth: Int32? = nil
    var _maxShields: Int32? = nil
    var _maxEnergy: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _unitType = source._unitType
      _playerRelative = source._playerRelative
      _health = source._health
      _shields = source._shields
      _energy = source._energy
      _transportSlotsTaken = source._transportSlotsTaken
      _buildProgress = source._buildProgress
      _addOn = source._addOn
      _maxHealth = source._maxHealth
      _maxShields = source._maxShields
      _maxEnergy = source._maxEnergy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._unitType)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._playerRelative)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._health)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._shields)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._energy)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._transportSlotsTaken)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._buildProgress)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._addOn)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._maxHealth)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._maxShields)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._maxEnergy)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._unitType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._playerRelative {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._health {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._shields {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._energy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._transportSlotsTaken {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._buildProgress {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      }
      if let v = _storage._addOn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._maxHealth {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._maxShields {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._maxEnergy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_UnitInfo, rhs: SC2APIProtocol_UnitInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._unitType != rhs_storage._unitType {return false}
        if _storage._playerRelative != rhs_storage._playerRelative {return false}
        if _storage._health != rhs_storage._health {return false}
        if _storage._shields != rhs_storage._shields {return false}
        if _storage._energy != rhs_storage._energy {return false}
        if _storage._transportSlotsTaken != rhs_storage._transportSlotsTaken {return false}
        if _storage._buildProgress != rhs_storage._buildProgress {return false}
        if _storage._addOn != rhs_storage._addOn {return false}
        if _storage._maxHealth != rhs_storage._maxHealth {return false}
        if _storage._maxShields != rhs_storage._maxShields {return false}
        if _storage._maxEnergy != rhs_storage._maxEnergy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_SinglePanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SinglePanel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unit"),
    2: .standard(proto: "attack_upgrade_level"),
    3: .standard(proto: "armor_upgrade_level"),
    4: .standard(proto: "shield_upgrade_level"),
    5: .same(proto: "buffs"),
  ]

  fileprivate class _StorageClass {
    var _unit: SC2APIProtocol_UnitInfo? = nil
    var _attackUpgradeLevel: Int32? = nil
    var _armorUpgradeLevel: Int32? = nil
    var _shieldUpgradeLevel: Int32? = nil
    var _buffs: [Int32] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _unit = source._unit
      _attackUpgradeLevel = source._attackUpgradeLevel
      _armorUpgradeLevel = source._armorUpgradeLevel
      _shieldUpgradeLevel = source._shieldUpgradeLevel
      _buffs = source._buffs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._unit)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._attackUpgradeLevel)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._armorUpgradeLevel)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._shieldUpgradeLevel)
        case 5: try decoder.decodeRepeatedInt32Field(value: &_storage._buffs)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._unit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._attackUpgradeLevel {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._armorUpgradeLevel {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._shieldUpgradeLevel {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if !_storage._buffs.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._buffs, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_SinglePanel, rhs: SC2APIProtocol_SinglePanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._unit != rhs_storage._unit {return false}
        if _storage._attackUpgradeLevel != rhs_storage._attackUpgradeLevel {return false}
        if _storage._armorUpgradeLevel != rhs_storage._armorUpgradeLevel {return false}
        if _storage._shieldUpgradeLevel != rhs_storage._shieldUpgradeLevel {return false}
        if _storage._buffs != rhs_storage._buffs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_MultiPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultiPanel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "units"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.units)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.units.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.units, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_MultiPanel, rhs: SC2APIProtocol_MultiPanel) -> Bool {
    if lhs.units != rhs.units {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_CargoPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CargoPanel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unit"),
    2: .same(proto: "passengers"),
    3: .standard(proto: "slots_available"),
  ]

  fileprivate class _StorageClass {
    var _unit: SC2APIProtocol_UnitInfo? = nil
    var _passengers: [SC2APIProtocol_UnitInfo] = []
    var _slotsAvailable: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _unit = source._unit
      _passengers = source._passengers
      _slotsAvailable = source._slotsAvailable
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._unit)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._passengers)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._slotsAvailable)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._unit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._passengers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._passengers, fieldNumber: 2)
      }
      if let v = _storage._slotsAvailable {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_CargoPanel, rhs: SC2APIProtocol_CargoPanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._unit != rhs_storage._unit {return false}
        if _storage._passengers != rhs_storage._passengers {return false}
        if _storage._slotsAvailable != rhs_storage._slotsAvailable {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_BuildItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ability_id"),
    2: .standard(proto: "build_progress"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._abilityID)
      case 2: try decoder.decodeSingularFloatField(value: &self._buildProgress)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._abilityID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._buildProgress {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_BuildItem, rhs: SC2APIProtocol_BuildItem) -> Bool {
    if lhs._abilityID != rhs._abilityID {return false}
    if lhs._buildProgress != rhs._buildProgress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ProductionPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductionPanel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unit"),
    2: .standard(proto: "build_queue"),
    3: .standard(proto: "production_queue"),
  ]

  fileprivate class _StorageClass {
    var _unit: SC2APIProtocol_UnitInfo? = nil
    var _buildQueue: [SC2APIProtocol_UnitInfo] = []
    var _productionQueue: [SC2APIProtocol_BuildItem] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _unit = source._unit
      _buildQueue = source._buildQueue
      _productionQueue = source._productionQueue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._unit)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._buildQueue)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._productionQueue)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._unit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._buildQueue.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buildQueue, fieldNumber: 2)
      }
      if !_storage._productionQueue.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._productionQueue, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ProductionPanel, rhs: SC2APIProtocol_ProductionPanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._unit != rhs_storage._unit {return false}
        if _storage._buildQueue != rhs_storage._buildQueue {return false}
        if _storage._productionQueue != rhs_storage._productionQueue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionUI: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionUI"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "control_group"),
    2: .standard(proto: "select_army"),
    3: .standard(proto: "select_warp_gates"),
    4: .standard(proto: "select_larva"),
    5: .standard(proto: "select_idle_worker"),
    6: .standard(proto: "multi_panel"),
    7: .standard(proto: "cargo_panel"),
    8: .standard(proto: "production_panel"),
    9: .standard(proto: "toggle_autocast"),
  ]

  fileprivate class _StorageClass {
    var _action: SC2APIProtocol_ActionUI.OneOf_Action?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _action = source._action
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: SC2APIProtocol_ActionControlGroup?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .controlGroup(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .controlGroup(v)}
        case 2:
          var v: SC2APIProtocol_ActionSelectArmy?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .selectArmy(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .selectArmy(v)}
        case 3:
          var v: SC2APIProtocol_ActionSelectWarpGates?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .selectWarpGates(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .selectWarpGates(v)}
        case 4:
          var v: SC2APIProtocol_ActionSelectLarva?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .selectLarva(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .selectLarva(v)}
        case 5:
          var v: SC2APIProtocol_ActionSelectIdleWorker?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .selectIdleWorker(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .selectIdleWorker(v)}
        case 6:
          var v: SC2APIProtocol_ActionMultiPanel?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .multiPanel(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .multiPanel(v)}
        case 7:
          var v: SC2APIProtocol_ActionCargoPanelUnload?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .cargoPanel(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .cargoPanel(v)}
        case 8:
          var v: SC2APIProtocol_ActionProductionPanelRemoveFromQueue?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .productionPanel(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .productionPanel(v)}
        case 9:
          var v: SC2APIProtocol_ActionToggleAutocast?
          if let current = _storage._action {
            try decoder.handleConflictingOneOf()
            if case .toggleAutocast(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._action = .toggleAutocast(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._action {
      case .controlGroup(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .selectArmy(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .selectWarpGates(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .selectLarva(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .selectIdleWorker(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .multiPanel(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .cargoPanel(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .productionPanel(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .toggleAutocast(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionUI, rhs: SC2APIProtocol_ActionUI) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._action != rhs_storage._action {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionControlGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionControlGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "control_group_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._action)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._controlGroupIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._action {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._controlGroupIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionControlGroup, rhs: SC2APIProtocol_ActionControlGroup) -> Bool {
    if lhs._action != rhs._action {return false}
    if lhs._controlGroupIndex != rhs._controlGroupIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionControlGroup.ControlGroupAction: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Recall"),
    2: .same(proto: "Set"),
    3: .same(proto: "Append"),
    4: .same(proto: "SetAndSteal"),
    5: .same(proto: "AppendAndSteal"),
  ]
}

extension SC2APIProtocol_ActionSelectArmy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionSelectArmy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "selection_add"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._selectionAdd)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._selectionAdd {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionSelectArmy, rhs: SC2APIProtocol_ActionSelectArmy) -> Bool {
    if lhs._selectionAdd != rhs._selectionAdd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionSelectWarpGates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionSelectWarpGates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "selection_add"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._selectionAdd)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._selectionAdd {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionSelectWarpGates, rhs: SC2APIProtocol_ActionSelectWarpGates) -> Bool {
    if lhs._selectionAdd != rhs._selectionAdd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionSelectLarva: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionSelectLarva"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionSelectLarva, rhs: SC2APIProtocol_ActionSelectLarva) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionSelectIdleWorker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionSelectIdleWorker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionSelectIdleWorker, rhs: SC2APIProtocol_ActionSelectIdleWorker) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionSelectIdleWorker.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Set"),
    2: .same(proto: "Add"),
    3: .same(proto: "All"),
    4: .same(proto: "AddAll"),
  ]
}

extension SC2APIProtocol_ActionMultiPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionMultiPanel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "unit_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularInt32Field(value: &self._unitIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._unitIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionMultiPanel, rhs: SC2APIProtocol_ActionMultiPanel) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._unitIndex != rhs._unitIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionMultiPanel.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SingleSelect"),
    2: .same(proto: "DeselectUnit"),
    3: .same(proto: "SelectAllOfType"),
    4: .same(proto: "DeselectAllOfType"),
  ]
}

extension SC2APIProtocol_ActionCargoPanelUnload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionCargoPanelUnload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unit_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._unitIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._unitIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionCargoPanelUnload, rhs: SC2APIProtocol_ActionCargoPanelUnload) -> Bool {
    if lhs._unitIndex != rhs._unitIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionProductionPanelRemoveFromQueue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionProductionPanelRemoveFromQueue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unit_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._unitIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._unitIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionProductionPanelRemoveFromQueue, rhs: SC2APIProtocol_ActionProductionPanelRemoveFromQueue) -> Bool {
    if lhs._unitIndex != rhs._unitIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SC2APIProtocol_ActionToggleAutocast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionToggleAutocast"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ability_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._abilityID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._abilityID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SC2APIProtocol_ActionToggleAutocast, rhs: SC2APIProtocol_ActionToggleAutocast) -> Bool {
    if lhs._abilityID != rhs._abilityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
